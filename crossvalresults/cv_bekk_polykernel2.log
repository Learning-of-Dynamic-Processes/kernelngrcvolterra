/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
/home/gballarin/hannah/Volterra/estimators/polykernel_funcs.py:24: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (Array(float64, 1, 'A', False, aligned=True), Array(float64, 1, 'A', False, aligned=True))
  kernel_val = (1 + np.dot(Delays[:, i], Delays[:, j]))**deg
Reached 100 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 200 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 300 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 400 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 500 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 600 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 700 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 800 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 900 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1000 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1100 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1200 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1300 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1400 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Reached 1500 hyperparameters
Best estimate so far: 1.1471376822605004 with (1, 1, 0.1, 0)
Best parameters found are (1, 1, 0.1, 0) with error 1.1471376822605004
Amount of time to run: 1033.497323513031
